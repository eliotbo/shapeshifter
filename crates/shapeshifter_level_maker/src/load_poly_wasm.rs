use crate::util::*;
use bevy::prelude::*;
use std::collections::HashMap;

// caches all polygons

pub fn load_all_polygons(mut loaded_polygons: ResMut<LoadedPolygonsRaw>) {
    let mut polygon_map: HashMap<String, SaveMeshMeta2> = HashMap::new();
    polygon_map.insert(
        "ss".to_string(),
        serde_json::from_str(&include_str!("polygons/ss.pts")).unwrap(),
    );
    polygon_map.insert(
        "hh".to_string(),
        serde_json::from_str(&include_str!("polygons/hh.pts")).unwrap(),
    );

    polygon_map.insert(
        "aa".to_string(),
        serde_json::from_str(&include_str!("polygons/aa.pts")).unwrap(),
    );
    polygon_map.insert(
        "pp".to_string(),
        serde_json::from_str(&include_str!("polygons/pp.pts")).unwrap(),
    );

    polygon_map.insert(
        "ee".to_string(),
        serde_json::from_str(&include_str!("polygons/ee.pts")).unwrap(),
    );
    polygon_map.insert(
        "ii".to_string(),
        serde_json::from_str(&include_str!("polygons/ii.pts")).unwrap(),
    );

    polygon_map.insert(
        "ff".to_string(),
        serde_json::from_str(&include_str!("polygons/ff.pts")).unwrap(),
    );
    polygon_map.insert(
        "tt".to_string(),
        serde_json::from_str(&include_str!("polygons/tt.pts")).unwrap(),
    );

    polygon_map.insert(
        "fish_charles".to_string(),
        serde_json::from_str(&include_str!("polygons/fish_charles.pts")).unwrap(),
    );
    polygon_map.insert(
        "gege_turtle".to_string(),
        serde_json::from_str(&include_str!("polygons/gege_turtle.pts")).unwrap(),
    );
    polygon_map.insert(
        "gege_weird".to_string(),
        serde_json::from_str(&include_str!("polygons/gege_weird.pts")).unwrap(),
    );
    polygon_map.insert(
        "gege1".to_string(),
        serde_json::from_str(&include_str!("polygons/gege1.pts")).unwrap(),
    );
    polygon_map.insert(
        "gege2".to_string(),
        serde_json::from_str(&include_str!("polygons/gege2.pts")).unwrap(),
    );
    polygon_map.insert(
        "gege3".to_string(),
        serde_json::from_str(&include_str!("polygons/gege3.pts")).unwrap(),
    );

    polygon_map.insert(
        "r".to_string(),
        serde_json::from_str(&include_str!("polygons/r.pts")).unwrap(),
    );
    polygon_map.insert(
        "i".to_string(),
        serde_json::from_str(&include_str!("polygons/i.pts")).unwrap(),
    );
    polygon_map.insert(
        "giraffe1".to_string(),
        serde_json::from_str(&include_str!("polygons/giraffe1.pts")).unwrap(),
    );
    polygon_map.insert(
        "h".to_string(),
        serde_json::from_str(&include_str!("polygons/h.pts")).unwrap(),
    );
    polygon_map.insert(
        "shark1".to_string(),
        serde_json::from_str(&include_str!("polygons/shark1.pts")).unwrap(),
    );
    polygon_map.insert(
        "eagle1".to_string(),
        serde_json::from_str(&include_str!("polygons/eagle1.pts")).unwrap(),
    );
    polygon_map.insert(
        "glass".to_string(),
        serde_json::from_str(&include_str!("polygons/glass.pts")).unwrap(),
    );
    polygon_map.insert(
        "house_arrow".to_string(),
        serde_json::from_str(&include_str!("polygons/house_arrow.pts")).unwrap(),
    );
    polygon_map.insert(
        "squirrel1".to_string(),
        serde_json::from_str(&include_str!("polygons/squirrel1.pts")).unwrap(),
    );
    polygon_map.insert(
        "otter1".to_string(),
        serde_json::from_str(&include_str!("polygons/otter1.pts")).unwrap(),
    );
    polygon_map.insert(
        "pear".to_string(),
        serde_json::from_str(&include_str!("polygons/pear.pts")).unwrap(),
    );
    polygon_map.insert(
        "t".to_string(),
        serde_json::from_str(&include_str!("polygons/t.pts")).unwrap(),
    );
    polygon_map.insert(
        "bird_box1".to_string(),
        serde_json::from_str(&include_str!("polygons/bird_box1.pts")).unwrap(),
    );
    polygon_map.insert(
        "cat2".to_string(),
        serde_json::from_str(&include_str!("polygons/cat2.pts")).unwrap(),
    );
    polygon_map.insert(
        "seal1".to_string(),
        serde_json::from_str(&include_str!("polygons/seal1.pts")).unwrap(),
    );
    polygon_map.insert(
        "duck1".to_string(),
        serde_json::from_str(&include_str!("polygons/duck1.pts")).unwrap(),
    );
    polygon_map.insert(
        "002_simplicity_square".to_string(),
        serde_json::from_str(&include_str!("polygons/002_simplicity_square.pts")).unwrap(),
    );
    polygon_map.insert(
        "butterfly1".to_string(),
        serde_json::from_str(&include_str!("polygons/butterfly1.pts")).unwrap(),
    );
    polygon_map.insert(
        "flowerpot".to_string(),
        serde_json::from_str(&include_str!("polygons/flowerpot.pts")).unwrap(),
    );
    polygon_map.insert(
        "turtle1".to_string(),
        serde_json::from_str(&include_str!("polygons/turtle1.pts")).unwrap(),
    );
    polygon_map.insert(
        "spade".to_string(),
        serde_json::from_str(&include_str!("polygons/spade.pts")).unwrap(),
    );
    polygon_map.insert(
        "f".to_string(),
        serde_json::from_str(&include_str!("polygons/f.pts")).unwrap(),
    );
    polygon_map.insert(
        "eggplant".to_string(),
        serde_json::from_str(&include_str!("polygons/eggplant.pts")).unwrap(),
    );
    polygon_map.insert(
        "cat3".to_string(),
        serde_json::from_str(&include_str!("polygons/cat3.pts")).unwrap(),
    );
    polygon_map.insert(
        "e".to_string(),
        serde_json::from_str(&include_str!("polygons/e.pts")).unwrap(),
    );
    polygon_map.insert(
        "frog".to_string(),
        serde_json::from_str(&include_str!("polygons/frog.pts")).unwrap(),
    );
    polygon_map.insert(
        "004_simplicity_rectangle".to_string(),
        serde_json::from_str(&include_str!("polygons/004_simplicity_rectangle.pts")).unwrap(),
    );
    polygon_map.insert(
        "fox1".to_string(),
        serde_json::from_str(&include_str!("polygons/fox1.pts")).unwrap(),
    );
    polygon_map.insert(
        "cat1".to_string(),
        serde_json::from_str(&include_str!("polygons/cat1.pts")).unwrap(),
    );
    polygon_map.insert(
        "calamary1".to_string(),
        serde_json::from_str(&include_str!("polygons/calamary1.pts")).unwrap(),
    );
    polygon_map.insert(
        "004_simplicity_square_cut".to_string(),
        serde_json::from_str(&include_str!("polygons/004_simplicity_square_cut.pts")).unwrap(),
    );
    polygon_map.insert(
        "s".to_string(),
        serde_json::from_str(&include_str!("polygons/s.pts")).unwrap(),
    );
    polygon_map.insert(
        "nanobot".to_string(),
        serde_json::from_str(&include_str!("polygons/nanobot.pts")).unwrap(),
    );
    polygon_map.insert(
        "horse1".to_string(),
        serde_json::from_str(&include_str!("polygons/horse1.pts")).unwrap(),
    );
    polygon_map.insert(
        "bird1".to_string(),
        serde_json::from_str(&include_str!("polygons/bird1.pts")).unwrap(),
    );
    polygon_map.insert(
        "pan".to_string(),
        serde_json::from_str(&include_str!("polygons/pan.pts")).unwrap(),
    );
    polygon_map.insert(
        "bird_colibri".to_string(),
        serde_json::from_str(&include_str!("polygons/bird_colibri.pts")).unwrap(),
    );
    polygon_map.insert(
        "bird2".to_string(),
        serde_json::from_str(&include_str!("polygons/bird2.pts")).unwrap(),
    );
    polygon_map.insert(
        "diamond".to_string(),
        serde_json::from_str(&include_str!("polygons/diamond.pts")).unwrap(),
    );
    polygon_map.insert(
        "poodle".to_string(),
        serde_json::from_str(&include_str!("polygons/poodle.pts")).unwrap(),
    );
    polygon_map.insert(
        "mouse1".to_string(),
        serde_json::from_str(&include_str!("polygons/mouse1.pts")).unwrap(),
    );
    polygon_map.insert(
        "d".to_string(),
        serde_json::from_str(&include_str!("polygons/d.pts")).unwrap(),
    );
    polygon_map.insert(
        "butterfly2".to_string(),
        serde_json::from_str(&include_str!("polygons/butterfly2.pts")).unwrap(),
    );
    polygon_map.insert(
        "heart".to_string(),
        serde_json::from_str(&include_str!("polygons/heart.pts")).unwrap(),
    );
    polygon_map.insert(
        "a".to_string(),
        serde_json::from_str(&include_str!("polygons/a.pts")).unwrap(),
    );
    polygon_map.insert(
        "005_simplicity_cactus".to_string(),
        serde_json::from_str(&include_str!("polygons/005_simplicity_cactus.pts")).unwrap(),
    );
    polygon_map.insert(
        "p".to_string(),
        serde_json::from_str(&include_str!("polygons/p.pts")).unwrap(),
    );
    polygon_map.insert(
        "c".to_string(),
        serde_json::from_str(&include_str!("polygons/c.pts")).unwrap(),
    );
    polygon_map.insert(
        "octogone".to_string(),
        serde_json::from_str(&include_str!("polygons/octogone.pts")).unwrap(),
    );
    polygon_map.insert(
        "mantaray1".to_string(),
        serde_json::from_str(&include_str!("polygons/mantaray1.pts")).unwrap(),
    );
    polygon_map.insert(
        "tree1".to_string(),
        serde_json::from_str(&include_str!("polygons/tree1.pts")).unwrap(),
    );
    polygon_map.insert(
        "fish1".to_string(),
        serde_json::from_str(&include_str!("polygons/fish1.pts")).unwrap(),
    );
    polygon_map.insert(
        "rooster".to_string(),
        serde_json::from_str(&include_str!("polygons/rooster.pts")).unwrap(),
    );
    polygon_map.insert(
        "elephant1".to_string(),
        serde_json::from_str(&include_str!("polygons/elephant1.pts")).unwrap(),
    );
    polygon_map.insert(
        "whale1".to_string(),
        serde_json::from_str(&include_str!("polygons/whale1.pts")).unwrap(),
    );
    polygon_map.insert(
        "003_simplicity_square_oblique".to_string(),
        serde_json::from_str(&include_str!("polygons/003_simplicity_square_oblique.pts")).unwrap(),
    );
    polygon_map.insert(
        "lion1".to_string(),
        serde_json::from_str(&include_str!("polygons/lion1.pts")).unwrap(),
    );
    polygon_map.insert(
        "yep".to_string(),
        serde_json::from_str(&include_str!("polygons/yep.pts")).unwrap(),
    );
    polygon_map.insert(
        "parrot".to_string(),
        serde_json::from_str(&include_str!("polygons/parrot.pts")).unwrap(),
    );
    polygon_map.insert(
        "004_simplicity_square_parallel".to_string(),
        serde_json::from_str(&include_str!("polygons/004_simplicity_square_parallel.pts")).unwrap(),
    );
    polygon_map.insert(
        "b".to_string(),
        serde_json::from_str(&include_str!("polygons/b.pts")).unwrap(),
    );
    polygon_map.insert(
        "beaver1".to_string(),
        serde_json::from_str(&include_str!("polygons/beaver1.pts")).unwrap(),
    );
    polygon_map.insert(
        "horse_sail1".to_string(),
        serde_json::from_str(&include_str!("polygons/horse_sail1.pts")).unwrap(),
    );
    polygon_map.insert(
        "rhino".to_string(),
        serde_json::from_str(&include_str!("polygons/rhino.pts")).unwrap(),
    );
    polygon_map.insert(
        "rabbit1".to_string(),
        serde_json::from_str(&include_str!("polygons/rabbit1.pts")).unwrap(),
    );
    polygon_map.insert(
        "my_target".to_string(),
        serde_json::from_str(&include_str!("polygons/my_target.pts")).unwrap(),
    );
    polygon_map.insert(
        "pelican1".to_string(),
        serde_json::from_str(&include_str!("polygons/pelican1.pts")).unwrap(),
    );
    polygon_map.insert(
        "fish2".to_string(),
        serde_json::from_str(&include_str!("polygons/fish2.pts")).unwrap(),
    );
    polygon_map.insert(
        "crab1".to_string(),
        serde_json::from_str(&include_str!("polygons/crab1.pts")).unwrap(),
    );

    loaded_polygons.polygons = polygon_map;
}
